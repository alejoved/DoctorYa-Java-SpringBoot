<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.project.doctorya.PhysicianIntegrationTest" time="1.607" tests="11" errors="4" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot\target\test-classes;C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot\target\classes;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.5\spring-boot-starter-web-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.5\spring-boot-starter-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.5\spring-boot-starter-logging-3.4.5.jar;C:\Users\joaaguir\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\joaaguir\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\joaaguir\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\joaaguir\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\joaaguir\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\joaaguir\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\joaaguir\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.5\spring-boot-starter-json-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.3\jackson-datatype-jdk8-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.3\jackson-datatype-jsr310-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.3\jackson-module-parameter-names-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.5\spring-boot-starter-tomcat-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.40\tomcat-embed-core-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.40\tomcat-embed-el-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.40\tomcat-embed-websocket-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-web\6.2.6\spring-web-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-beans\6.2.6\spring-beans-6.2.6.jar;C:\Users\joaaguir\.m2\repository\io\micrometer\micrometer-observation\1.14.6\micrometer-observation-1.14.6.jar;C:\Users\joaaguir\.m2\repository\io\micrometer\micrometer-commons\1.14.6\micrometer-commons-1.14.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-webmvc\6.2.6\spring-webmvc-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-context\6.2.6\spring-context-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-expression\6.2.6\spring-expression-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-devtools\3.4.5\spring-boot-devtools-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot\3.4.5\spring-boot-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.5\spring-boot-autoconfigure-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.5\spring-boot-starter-data-jpa-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.5\spring-boot-starter-jdbc-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-jdbc\6.2.6\spring-jdbc-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\orm\hibernate-core\6.6.13.Final\hibernate-core-6.6.13.Final.jar;C:\Users\joaaguir\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\joaaguir\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\joaaguir\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\joaaguir\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\joaaguir\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\joaaguir\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\joaaguir\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\data\spring-data-jpa\3.4.5\spring-data-jpa-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\data\spring-data-commons\3.4.5\spring-data-commons-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-orm\6.2.6\spring-orm-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-tx\6.2.6\spring-tx-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-aspects\6.2.6\spring-aspects-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\joaaguir\.m2\repository\org\postgresql\postgresql\42.7.5\postgresql-42.7.5.jar;C:\Users\joaaguir\.m2\repository\org\checkerframework\checker-qual\3.48.3\checker-qual-3.48.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.4.5\spring-boot-starter-security-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-aop\6.2.6\spring-aop-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-config\6.4.5\spring-security-config-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-web\6.4.5\spring-security-web-6.4.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.3\jackson-databind-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.3\jackson-annotations-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.3\jackson-core-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\modelmapper\modelmapper\3.1.1\modelmapper-3.1.1.jar;C:\Users\joaaguir\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\joaaguir\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-oauth2-resource-server\3.4.5\spring-boot-starter-oauth2-resource-server-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-core\6.4.5\spring-security-core-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-crypto\6.4.5\spring-security-crypto-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-resource-server\6.4.5\spring-security-oauth2-resource-server-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-core\6.4.5\spring-security-oauth2-core-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-jose\6.4.5\spring-security-oauth2-jose-6.4.5.jar;C:\Users\joaaguir\.m2\repository\com\nimbusds\nimbus-jose-jwt\9.37.3\nimbus-jose-jwt-9.37.3.jar;C:\Users\joaaguir\.m2\repository\com\github\stephenc\jcip\jcip-annotations\1.0-1\jcip-annotations-1.0-1.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.8.8\springdoc-openapi-starter-webmvc-ui-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.8.8\springdoc-openapi-starter-webmvc-api-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.8.8\springdoc-openapi-starter-common-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.4.5\spring-boot-starter-validation-3.4.5.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.30\swagger-core-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.30\swagger-annotations-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.30\swagger-models-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.18.3\jackson-dataformat-yaml-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\webjars\swagger-ui\5.21.0\swagger-ui-5.21.0.jar;C:\Users\joaaguir\.m2\repository\org\webjars\webjars-locator-lite\1.0.1\webjars-locator-lite-1.0.1.jar;C:\Users\joaaguir\.m2\repository\org\jspecify\jspecify\1.0.0\jspecify-1.0.0.jar;C:\Users\joaaguir\.m2\repository\me\paulschwarz\spring-dotenv\2.2.0\spring-dotenv-2.2.0.jar;C:\Users\joaaguir\.m2\repository\io\github\cdimascio\dotenv-java\2.0.0\dotenv-java-2.0.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.5\spring-boot-starter-test-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-test\3.4.5\spring-boot-test-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.5\spring-boot-test-autoconfigure-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\joaaguir\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\joaaguir\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\joaaguir\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\joaaguir\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\joaaguir\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\joaaguir\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\joaaguir\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\joaaguir\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\joaaguir\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\joaaguir\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-core\6.2.6\spring-core-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-jcl\6.2.6\spring-jcl-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-test\6.2.6\spring-test-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\joaaguir\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\joaaguir\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\joaaguir\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\joaaguir\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\joaaguir\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\joaaguir\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\joaaguir\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/Bogota"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="APPLICATION_NAME" value="doctorya"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="CO"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Amazon Corretto\jdk21.0.7_6\bin"/>
    <property name="sun.java.command" value="C:\Users\joaaguir\AppData\Local\Temp\surefire3395180301586721392\surefirebooter-20250624102440362_3.jar C:\Users\joaaguir\AppData\Local\Temp\surefire3395180301586721392 2025-06-24T10-24-40_156-jvmRun1 surefire-20250624102440362_1tmp surefire_0-20250624102440362_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot\target\test-classes;C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot\target\classes;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.5\spring-boot-starter-web-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.5\spring-boot-starter-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.5\spring-boot-starter-logging-3.4.5.jar;C:\Users\joaaguir\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\joaaguir\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\joaaguir\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\joaaguir\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\joaaguir\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\joaaguir\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\joaaguir\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.5\spring-boot-starter-json-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.3\jackson-datatype-jdk8-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.3\jackson-datatype-jsr310-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.3\jackson-module-parameter-names-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.5\spring-boot-starter-tomcat-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.40\tomcat-embed-core-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.40\tomcat-embed-el-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.40\tomcat-embed-websocket-10.1.40.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-web\6.2.6\spring-web-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-beans\6.2.6\spring-beans-6.2.6.jar;C:\Users\joaaguir\.m2\repository\io\micrometer\micrometer-observation\1.14.6\micrometer-observation-1.14.6.jar;C:\Users\joaaguir\.m2\repository\io\micrometer\micrometer-commons\1.14.6\micrometer-commons-1.14.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-webmvc\6.2.6\spring-webmvc-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-context\6.2.6\spring-context-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-expression\6.2.6\spring-expression-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-devtools\3.4.5\spring-boot-devtools-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot\3.4.5\spring-boot-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.5\spring-boot-autoconfigure-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.5\spring-boot-starter-data-jpa-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.5\spring-boot-starter-jdbc-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-jdbc\6.2.6\spring-jdbc-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\orm\hibernate-core\6.6.13.Final\hibernate-core-6.6.13.Final.jar;C:\Users\joaaguir\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\joaaguir\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\joaaguir\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\joaaguir\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\joaaguir\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\joaaguir\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\joaaguir\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\joaaguir\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\data\spring-data-jpa\3.4.5\spring-data-jpa-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\data\spring-data-commons\3.4.5\spring-data-commons-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-orm\6.2.6\spring-orm-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-tx\6.2.6\spring-tx-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-aspects\6.2.6\spring-aspects-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\joaaguir\.m2\repository\org\postgresql\postgresql\42.7.5\postgresql-42.7.5.jar;C:\Users\joaaguir\.m2\repository\org\checkerframework\checker-qual\3.48.3\checker-qual-3.48.3.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.4.5\spring-boot-starter-security-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-aop\6.2.6\spring-aop-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-config\6.4.5\spring-security-config-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-web\6.4.5\spring-security-web-6.4.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\joaaguir\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.3\jackson-databind-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.3\jackson-annotations-2.18.3.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.3\jackson-core-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\modelmapper\modelmapper\3.1.1\modelmapper-3.1.1.jar;C:\Users\joaaguir\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\joaaguir\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\joaaguir\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-oauth2-resource-server\3.4.5\spring-boot-starter-oauth2-resource-server-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-core\6.4.5\spring-security-core-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-crypto\6.4.5\spring-security-crypto-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-resource-server\6.4.5\spring-security-oauth2-resource-server-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-core\6.4.5\spring-security-oauth2-core-6.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\security\spring-security-oauth2-jose\6.4.5\spring-security-oauth2-jose-6.4.5.jar;C:\Users\joaaguir\.m2\repository\com\nimbusds\nimbus-jose-jwt\9.37.3\nimbus-jose-jwt-9.37.3.jar;C:\Users\joaaguir\.m2\repository\com\github\stephenc\jcip\jcip-annotations\1.0-1\jcip-annotations-1.0-1.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.8.8\springdoc-openapi-starter-webmvc-ui-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.8.8\springdoc-openapi-starter-webmvc-api-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.8.8\springdoc-openapi-starter-common-2.8.8.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.4.5\spring-boot-starter-validation-3.4.5.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.30\swagger-core-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.30\swagger-annotations-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.30\swagger-models-jakarta-2.2.30.jar;C:\Users\joaaguir\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.18.3\jackson-dataformat-yaml-2.18.3.jar;C:\Users\joaaguir\.m2\repository\org\webjars\swagger-ui\5.21.0\swagger-ui-5.21.0.jar;C:\Users\joaaguir\.m2\repository\org\webjars\webjars-locator-lite\1.0.1\webjars-locator-lite-1.0.1.jar;C:\Users\joaaguir\.m2\repository\org\jspecify\jspecify\1.0.0\jspecify-1.0.0.jar;C:\Users\joaaguir\.m2\repository\me\paulschwarz\spring-dotenv\2.2.0\spring-dotenv-2.2.0.jar;C:\Users\joaaguir\.m2\repository\io\github\cdimascio\dotenv-java\2.0.0\dotenv-java-2.0.0.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.5\spring-boot-starter-test-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-test\3.4.5\spring-boot-test-3.4.5.jar;C:\Users\joaaguir\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.5\spring-boot-test-autoconfigure-3.4.5.jar;C:\Users\joaaguir\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\joaaguir\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\joaaguir\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\joaaguir\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\joaaguir\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\joaaguir\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\joaaguir\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\joaaguir\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\joaaguir\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\joaaguir\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\joaaguir\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-core\6.2.6\spring-core-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-jcl\6.2.6\spring-jcl-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\springframework\spring-test\6.2.6\spring-test-6.2.6.jar;C:\Users\joaaguir\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\joaaguir\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\joaaguir\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\joaaguir\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\joaaguir\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\joaaguir\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\joaaguir\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\joaaguir\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\joaaguir\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\joaaguir\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\joaaguir"/>
    <property name="user.language" value="es"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="C:\Program Files\Amazon Corretto\jdk21.0.7_6"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\joaaguir\AppData\Local\Temp\surefire3395180301586721392\surefirebooter-20250624102440362_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.7+6-LTS"/>
    <property name="user.name" value="joaaguir"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-21.0.7.6.1"/>
    <property name="localRepository" value="C:\Users\joaaguir\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-21/issues/"/>
    <property name="java.io.tmpdir" value="C:\Users\joaaguir\AppData\Local\Temp\"/>
    <property name="com.zaxxer.hikari.pool_number" value="2"/>
    <property name="java.version" value="21.0.7"/>
    <property name="user.dir" value="C:\Users\joaaguir\Documents\github\DoctorYa-Java-SpringBoot"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="28216"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Amazon Corretto\jdk21.0.7_6\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Amazon Corretto\jdk21.0.7_6\bin;C:\Oracle21c\dbhomeXE\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\angular-cli-master;C:\Program Files\Amazon\SessionManagerPlugin\bin\;C:\Users\joaaguir\AppData\Roaming\npm\;C:\Program Files\Amazon\AWSCLIV2\;C:\Program Files\RedHat\Podman\;C:\Users\joaaguir\Documents\Bancolombia\kubernetes;C:\Program Files\Git\cmd;C:\Program Files\Cloudflare\Cloudflare WARP\;C:\Program Files\nodejs\;C:\docker;C:\Program Files\Kubernetes\Minikube;C:\Program Files\dotnet\;C:\Users\joaaguir\AppData\Local\Programs\Python\Python313\Scripts\;C:\Users\joaaguir\AppData\Local\Programs\Python\Python313\;C:\Users\joaaguir\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\joaaguir\AppData\Local\Programs\Python\Python312\;C:\Users\joaaguir\AppData\Local\Microsoft\WindowsApps;;C:\Users\joaaguir\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\joaaguir\AppData\Roaming\npm;C:\Users\joaaguir\.dotnet\tools;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="21.0.7+6-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[doctorya] "/>
  </properties>
  <testcase name="testGetByIdentificationPhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.145">
    <system-out><![CDATA[2025-06-24T10:25:01.073-05:00  INFO 28216 --- [doctorya] [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.project.doctorya.PhysicianIntegrationTest]: PhysicianIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-06-24T10:25:01.075-05:00  INFO 28216 --- [doctorya] [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.project.doctorya.DoctoryaApplication for test class com.project.doctorya.PhysicianIntegrationTest
2025-06-24T10:25:01.080-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.080-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.080-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.143-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.143-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.143-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:01.206-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing GET /physician/identification/1053847620
2025-06-24T10:25:01.207-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.207-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.207-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured GET /physician/identification/1053847620
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where a1_0.identification=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testGetByIdPhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.137">
    <system-out><![CDATA[2025-06-24T10:25:01.225-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.225-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.225-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.285-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.285-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.285-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:01.348-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing GET /physician/5c31abfa-7646-4e0d-abae-d28c7ab80fee
2025-06-24T10:25:01.348-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.348-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.349-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured GET /physician/5c31abfa-7646-4e0d-abae-d28c7ab80fee
2025-06-24T10:25:01.349-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.getById(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:01.349-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.getById(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testNotFoundDeletePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.136">
    <system-out><![CDATA[2025-06-24T10:25:01.363-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.363-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.363-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.424-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.424-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.425-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:01.486-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing DELETE /physician/006c536e-f537-46dc-a92f-3d340138573f
2025-06-24T10:25:01.487-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.487-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.487-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured DELETE /physician/006c536e-f537-46dc-a92f-3d340138573f
2025-06-24T10:25:01.487-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public void com.project.doctorya.physician.rest.controller.PhysicianController.delete(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:01.488-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public void com.project.doctorya.physician.rest.controller.PhysicianController.delete(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testNotFoundUpdatePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.145">
    <error message="Request processing failed: org.springframework.orm.jpa.JpaObjectRetrievalFailureException: Physician not found" type="jakarta.servlet.ServletException"><![CDATA[jakarta.servlet.ServletException: Request processing failed: org.springframework.orm.jpa.JpaObjectRetrievalFailureException: Physician not found
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1022)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:145)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.project.doctorya.PhysicianIntegrationTest.testNotFoundUpdatePhysician(PhysicianIntegrationTest.java:263)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.springframework.orm.jpa.JpaObjectRetrievalFailureException: Physician not found
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:376)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.infrastructure.repository.PhysicianRepository$$SpringCGLIB$$0.update(<generated>)
	at com.project.doctorya.physician.application.usecase.PhysicianUpdateUseCase.execute(PhysicianUpdateUseCase.java:20)
	at com.project.doctorya.physician.rest.controller.PhysicianController.update(PhysicianController.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.rest.controller.PhysicianController$$SpringCGLIB$$0.update(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	... 71 more
Caused by: jakarta.persistence.EntityNotFoundException: Physician not found
	at com.project.doctorya.physician.infrastructure.repository.PhysicianRepository.update(PhysicianRepository.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 96 more
]]></error>
    <system-out><![CDATA[2025-06-24T10:25:01.499-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.500-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.500-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.562-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.562-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.562-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:01.626-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing PUT /physician/cfc1f1ad-d743-4471-9251-a103d4abb9a0
2025-06-24T10:25:01.626-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.627-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.627-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured PUT /physician/cfc1f1ad-d743-4471-9251-a103d4abb9a0
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/register
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#register(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"identification":"1053847601"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#login(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMDUzODQ3NjAxIiwicm9sZXMiOlsiQURNSU4iXSwiaWF0IjoxNzUwNzc4NzAxLCJleHAiOjE3NTA3ODU5MDF9.CUgjcuq3B90amy7JnZGhZxasrxGO8DGme2IuGf94hKw"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testDeletePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.138">
    <system-out><![CDATA[2025-06-24T10:25:01.646-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.646-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.646-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.708-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.708-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.708-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:01.768-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing DELETE /physician/aee31818-63c9-4d49-9022-87223bb98d0c
2025-06-24T10:25:01.769-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.769-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.769-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured DELETE /physician/aee31818-63c9-4d49-9022-87223bb98d0c
2025-06-24T10:25:01.770-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public void com.project.doctorya.physician.rest.controller.PhysicianController.delete(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:01.770-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public void com.project.doctorya.physician.rest.controller.PhysicianController.delete(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testGetByIdentificationNotFoundPhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.13">
    <error message="Request processing failed: java.lang.NullPointerException: Cannot invoke &quot;com.project.doctorya.physician.domain.model.PhysicianModel.getName()&quot; because &quot;physicianModel&quot; is null" type="jakarta.servlet.ServletException"><![CDATA[jakarta.servlet.ServletException: Request processing failed: java.lang.NullPointerException: Cannot invoke "com.project.doctorya.physician.domain.model.PhysicianModel.getName()" because "physicianModel" is null
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1022)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:145)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.project.doctorya.PhysicianIntegrationTest.testGetByIdentificationNotFoundPhysician(PhysicianIntegrationTest.java:214)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: java.lang.NullPointerException: Cannot invoke "com.project.doctorya.physician.domain.model.PhysicianModel.getName()" because "physicianModel" is null
	at com.project.doctorya.physician.rest.mapper.PhysicianRestMapper.toDTO(PhysicianRestMapper.java:22)
	at com.project.doctorya.physician.rest.controller.PhysicianController.getByIdentification(PhysicianController.java:84)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.rest.controller.PhysicianController$$SpringCGLIB$$0.getByIdentification(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	... 71 more
]]></error>
    <system-out><![CDATA[2025-06-24T10:25:01.784-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.784-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.784-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.844-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.844-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.844-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
2025-06-24T10:25:01.902-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing GET /physician/identification/1053847600
2025-06-24T10:25:01.902-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:01.902-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@f654e4b0, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:01.902-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured GET /physician/identification/1053847600
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where a1_0.identification=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/register
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#register(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"identification":"1053847601"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#login(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMDUzODQ3NjAxIiwicm9sZXMiOlsiQURNSU4iXSwiaWF0IjoxNzUwNzc4NzAxLCJleHAiOjE3NTA3ODU5MDF9.CUgjcuq3B90amy7JnZGhZxasrxGO8DGme2IuGf94hKw"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testGetPhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.131">
    <system-out><![CDATA[2025-06-24T10:25:01.914-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:01.914-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.914-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:01.974-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:01.975-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:01.975-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:02.034-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing GET /physician
2025-06-24T10:25:02.034-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:02.034-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@7049b88c, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:02.034-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured GET /physician
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testUpdatePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.149">
    <error message="Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»&#10;  Detail: Ya existe la llave (identification)=(1053847620).] [insert into auth (identification,password,role,id) values (?,?,?,?)]; SQL [insert into auth (identification,password,role,id) values (?,?,?,?)]; constraint [null]" type="jakarta.servlet.ServletException"><![CDATA[jakarta.servlet.ServletException: 
Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»
  Detail: Ya existe la llave (identification)=(1053847620).] [insert into auth (identification,password,role,id) values (?,?,?,?)]; SQL [insert into auth (identification,password,role,id) values (?,?,?,?)]; constraint [null]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1022)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:145)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.project.doctorya.PhysicianIntegrationTest.testUpdatePhysician(PhysicianIntegrationTest.java:236)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»
  Detail: Ya existe la llave (identification)=(1053847620).] [insert into auth (identification,password,role,id) values (?,?,?,?)]; SQL [insert into auth (identification,password,role,id) values (?,?,?,?)]; constraint [null]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:294)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:256)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy149.save(Unknown Source)
	at com.project.doctorya.physician.infrastructure.repository.PhysicianRepository.update(PhysicianRepository.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.infrastructure.repository.PhysicianRepository$$SpringCGLIB$$0.update(<generated>)
	at com.project.doctorya.physician.application.usecase.PhysicianUpdateUseCase.execute(PhysicianUpdateUseCase.java:20)
	at com.project.doctorya.physician.rest.controller.PhysicianController.update(PhysicianController.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.rest.controller.PhysicianController$$SpringCGLIB$$0.update(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	... 71 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»
  Detail: Ya existe la llave (identification)=(1053847620).] [insert into auth (identification,password,role,id) values (?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:194)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:132)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:104)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:110)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	... 115 more
Caused by: org.postgresql.util.PSQLException: ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»
  Detail: Ya existe la llave (identification)=(1053847620).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2733)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2420)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:372)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:517)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:434)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:194)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:155)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 136 more
]]></error>
    <system-out><![CDATA[2025-06-24T10:25:02.046-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:02.046-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.047-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:02.107-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:02.108-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.108-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:02.178-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing PUT /physician/c975f018-9eef-4ae9-8266-acc6b411da1b
2025-06-24T10:25:02.179-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:02.179-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@7049b88c, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:02.179-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured PUT /physician/c975f018-9eef-4ae9-8266-acc6b411da1b
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:02.183-05:00  WARN 28216 --- [doctorya] [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 0, SQLState: 23505
2025-06-24T10:25:02.183-05:00 ERROR 28216 --- [doctorya] [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : ERROR: llave duplicada viola restricción de unicidad «auth_identification_key»
  Detail: Ya existe la llave (identification)=(1053847620).
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/register
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#register(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"identification":"1053847601"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#login(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMDUzODQ3NjAxIiwicm9sZXMiOlsiQURNSU4iXSwiaWF0IjoxNzUwNzc4NzAyLCJleHAiOjE3NTA3ODU5MDJ9.I-VHOjffz-OWdMX5m3wgVnrrN_hG6VqITaWyMi8p0gU"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testGetByIdNotFoundPhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.134">
    <error message="Request processing failed: java.lang.NullPointerException: Cannot invoke &quot;com.project.doctorya.physician.domain.model.PhysicianModel.getName()&quot; because &quot;physicianModel&quot; is null" type="jakarta.servlet.ServletException"><![CDATA[jakarta.servlet.ServletException: Request processing failed: java.lang.NullPointerException: Cannot invoke "com.project.doctorya.physician.domain.model.PhysicianModel.getName()" because "physicianModel" is null
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1022)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:145)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.project.doctorya.PhysicianIntegrationTest.testGetByIdNotFoundPhysician(PhysicianIntegrationTest.java:179)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: java.lang.NullPointerException: Cannot invoke "com.project.doctorya.physician.domain.model.PhysicianModel.getName()" because "physicianModel" is null
	at com.project.doctorya.physician.rest.mapper.PhysicianRestMapper.toDTO(PhysicianRestMapper.java:22)
	at com.project.doctorya.physician.rest.controller.PhysicianController.getById(PhysicianController.java:71)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.project.doctorya.physician.rest.controller.PhysicianController$$SpringCGLIB$$0.getById(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	... 71 more
]]></error>
    <system-out><![CDATA[2025-06-24T10:25:02.197-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:02.197-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.197-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:02.259-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:02.259-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.259-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
2025-06-24T10:25:02.319-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing GET /physician/a6bf51da-2962-442f-b9f5-817e69d914df
2025-06-24T10:25:02.319-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:02.320-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@7049b88c, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:02.320-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured GET /physician/a6bf51da-2962-442f-b9f5-817e69d914df
2025-06-24T10:25:02.320-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.getById(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:02.321-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.getById(java.util.UUID); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select p1_0.id,a1_0.id,a1_0.identification,a1_0.password,a1_0.role,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0 left join auth a1_0 on a1_0.id=p1_0.auth_id where p1_0.id=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/register
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#register(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"identification":"1053847601"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /auth/login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"50"]
             Body = {"identification":"1053847601","password":"12345"}
    Session Attrs = {}

Handler:
             Type = com.project.doctorya.auth.rest.controller.AuthController
           Method = com.project.doctorya.auth.rest.controller.AuthController#login(AuthDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMDUzODQ3NjAxIiwicm9sZXMiOlsiQURNSU4iXSwiaWF0IjoxNzUwNzc4NzAyLCJleHAiOjE3NTA3ODU5MDJ9.I-VHOjffz-OWdMX5m3wgVnrrN_hG6VqITaWyMi8p0gU"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testExistsCreatePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.147">
    <system-out><![CDATA[2025-06-24T10:25:02.331-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:02.332-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.332-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:02.394-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:02.395-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.395-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
2025-06-24T10:25:02.463-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /physician
2025-06-24T10:25:02.464-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:02.464-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@7049b88c, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:02.464-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /physician
2025-06-24T10:25:02.465-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.create(com.project.doctorya.physician.rest.dto.PhysicianDTO); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:02.465-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.create(com.project.doctorya.physician.rest.dto.PhysicianDTO); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
  <testcase name="testCreatePhysician" classname="com.project.doctorya.PhysicianIntegrationTest" time="0.201">
    <system-out><![CDATA[2025-06-24T10:25:02.479-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/register
2025-06-24T10:25:02.480-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.480-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/register
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
2025-06-24T10:25:02.544-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /auth/login
2025-06-24T10:25:02.544-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-24T10:25:02.544-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /auth/login
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
2025-06-24T10:25:02.607-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Securing POST /physician
2025-06-24T10:25:02.607-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.s.o.s.r.a.JwtAuthenticationProvider  : Authenticated token
2025-06-24T10:25:02.607-05:00 DEBUG 28216 --- [doctorya] [           main] .s.r.w.a.BearerTokenAuthenticationFilter : Set SecurityContextHolder to JwtAuthenticationToken [Principal=org.springframework.security.oauth2.jwt.Jwt@7049b88c, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=127.0.0.1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-24T10:25:02.608-05:00 DEBUG 28216 --- [doctorya] [           main] o.s.security.web.FilterChainProxy        : Secured POST /physician
2025-06-24T10:25:02.608-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.create(com.project.doctorya.physician.rest.dto.PhysicianDTO); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
2025-06-24T10:25:02.608-05:00 DEBUG 28216 --- [doctorya] [           main] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.project.doctorya.physician.rest.controller.PhysicianController.create(com.project.doctorya.physician.rest.dto.PhysicianDTO); target is of class [com.project.doctorya.physician.rest.controller.PhysicianController]
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.identification=?
Hibernate: insert into auth (identification,password,role,id) values (?,?,?,?)
Hibernate: insert into physician (auth_id,code,name,speciality,id) values (?,?,?,?,?)
Hibernate: select p1_0.id,p1_0.auth_id,p1_0.code,p1_0.name,p1_0.speciality from physician p1_0
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0 where a1_0.id=?
Hibernate: delete from physician where id=?
Hibernate: delete from auth where id=?
Hibernate: select a1_0.id,a1_0.identification,a1_0.password,a1_0.role from auth a1_0
Hibernate: delete from auth where id=?
]]></system-out>
  </testcase>
</testsuite>